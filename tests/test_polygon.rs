use geo::{orient::Direction, wkt, Geometry, Orient};
use klippa::*;
use wkt::ToWkt;

#[test]
fn test_poly_corner() {
    let rect = ClipRect::new(0.0, 0.0, 4.0, 4.0);
    let g = wkt!(POLYGON((-1.1425781250000002 0.010986328057683181,-0.7031250000000007 0.4394488164139716,0.46142578124999994 0.40649073057389273,0.7360839843749998 -0.4833927027897005,0.0109863281249997 -0.9557662177941353,-1.1425781250000002 0.010986328057683181))).orient(Direction::Default);

    let clip = rect.clip(&Geometry::Polygon(g)).unwrap();
    assert_eq!(
            clip.to_wkt().to_string(),
            "POLYGON((0.5868871725519964 0,0.46142578124999994 0.40649073057389273,0 0.4195495947746787,0 0,0.5868871725519964 0))"
        );
}

#[test]
fn test_poly_diagonal() {
    let rect = ClipRect::new(0.0, 0.0, 4.0, 4.0);
    let g = wkt!(POLYGON((0.2526855468749994 4.937724274302482,5.174560546875 0.0549316322096729,3.3508300781249996 -1.0436434559084802,-1.3073730468750009 4.039617826768435,0.2526855468749994 4.937724274302482))).orient(Direction::Default);

    let clip = rect.clip(&Geometry::Polygon(g)).unwrap();
    assert_eq!(
            clip.to_wkt().to_string(),
            "POLYGON((4 1.220165531074182,1.1979154595268593 4,0 4,0 2.612947796960526,2.3944552358035853 0,4 0,4 1.220165531074182))"
        );
}

#[test]
fn test_poly_angle() {
    let rect = ClipRect::new(0.0, 0.0, 4.0, 4.0);
    let g = wkt!(POLYGON((2.7465820312500004 4.423090477960912,1.1755371093750002 4.543570279371764,1.109619140625 1.603794430058997,4.7900390625 1.5159363834516881,4.746093749999999 3.217302058187144,2.7026367187499996 3.19536379832941,2.7465820312500004 4.423090477960912)));

    let clip = rect.clip(&Geometry::Polygon(g)).unwrap();
    println!("{}", clip.to_wkt());
    assert_eq!(
            clip.to_wkt().to_string(),
            "POLYGON((4 3.209292103333472,2.7026367187499996 3.19536379832941,2.731437908719937 4,1.1633487485863934 4,1.109619140625 1.603794430058997,4 1.5347959946504444,4 3.209292103333472))"
        );
}

#[test]
fn test_poly_cross() {
    let rect = ClipRect::new(0.0, 0.0, 4.0, 4.0);
    let g = wkt!(POLYGON((1.3732910156250002 4.532618393971788,2.867431640625 4.5764249358536375,2.933349609374999 2.8223442468940902,4.812011718749999 2.8113711933311407,4.822998046874999 1.537901237431484,3.021240234375 1.5488835798473986,3.0322265624999996 -0.3515602939922644,1.417236328125 -0.37353251022881295,1.3952636718749996 1.4939713066293194,-0.7690429687499999 1.482988685660274,-0.7360839843749998 2.8333171968552904,1.3293457031250002 2.7126091154394203,1.109619140625 4.4449973697272895,1.3732910156250002 4.532618393971788))).orient(Direction::Default);

    let clip = rect.clip(&Geometry::Polygon(g)).unwrap();
    println!("{}", clip.to_wkt());

    assert_eq!(
            clip.to_wkt().to_string(),
            "POLYGON((3.0301942179521353 0,3.021240234375 1.5488835798473986,4 1.5429176976325745,4 2.8161140622265752,2.933349609374999 2.8223442468940902,2.889093563675335 4,1.1660601503869326 4,1.3293457031250002 2.7126091154394203,0 2.7902988912443156,0 1.4868911398117115,1.3952636718749996 1.4939713066293194,1.4128414233481703 0,3.0301942179521353 0))"
        );
}

#[test]
fn test_poly_star() {
    let rect = ClipRect::new(0.0, 0.0, 4.0, 4.0);
    let g = wkt!(POLYGON((1.9335937500000013 -1.120534032250049,1.0986328124999993 0.5932511181408557,-2.1093749999999987 0.46142079353062115,0.28564453125000056 2.482133403730572,-0.8569335937499997 5.156598738411162,1.7797851562500016 3.798483975036973,4.987792968750002 4.609278084409837,3.8452148437499996 2.2625953010152386,6.26220703125 0.9008417889908884,2.7026367187500018 0.6811362994451144,1.9335937500000013 -1.120534032250049))).orient(Direction::Default);

    let clip = rect.clip(&Geometry::Polygon(g)).unwrap();
    println!("{}", clip.to_wkt());

    assert_eq!(
            clip.to_wkt().to_string(),
            "POLYGON((2.4118936939948554 0,2.7026367187500018 0.6811362994451144,4 0.7612127721094657,4 2.17538805590176,3.8452148437499996 2.2625953010152386,4 2.5805006182528833,4 4,2.577108391522845 4,1.7797851562500016 3.798483975036973,1.388550854278802 4,0 4,0 3.1507497374007207,0.28564453125000056 2.482133403730572,0 2.241130982330577,0 0.5481037466989945,1.0986328124999993 0.5932511181408557,1.3876664230799653 0,2.4118936939948554 0))"
        );
}

#[test]
fn test_poly_concave_1() {
    let rect = ClipRect::new(0.0, 0.0, 4.0, 4.0);
    let g = wkt!(POLYGON((3.7353515625000004 4.740675384778385,3.790283203125001 2.756504385543252,0.5712890625000011 2.7784514150468738,0.5603027343750014 4.718777551249872,2.13134765625 3.1624555302378496,3.7353515625000004 4.740675384778385))).orient(Direction::Default);

    let clip = rect.clip(&Geometry::Polygon(g)).unwrap();
    println!("{}", clip.to_wkt());

    assert_eq!(
            clip.to_wkt().to_string(),
            "POLYGON((2.9825754476705333 4,2.13134765625 3.1624555302378496,1.285879964924343 4,0.5643725275296553 4,0.5712890625000011 2.7784514150468738,3.790283203125001 2.756504385543252,3.755857110697265 4,2.9825754476705333 4))"
        );
}

#[test]
fn test_poly_concave_2() {
    let rect = ClipRect::new(0.0, 0.0, 4.0, 4.0);
    let g = wkt!(POLYGON((3.735351562499999 5.189423479732426,2.065429687499999 2.6467632307409588,5.284423828124999 2.668712251961324,-0.12084960937499983 -1.417091829441631,2.6257324218750004 1.7575368113083272,-0.8349609375000002 1.691648704756986,1.8566894531249996 5.145656780300527,3.735351562499999 5.189423479732426))).orient(Direction::Default);

    let clip = rect.clip(&Geometry::Polygon(g)).unwrap();
    println!("{}", clip.to_wkt());

    assert_eq!(
            clip.to_wkt().to_string(),
            "POLYGON((1.7538777812611586 0,4 1.697826286637885,4 2.6599542845255755,2.065429687499999 2.6467632307409588,2.954183772492809 4,0.9638983962503497 4,0 2.763096107782738,0 1.7075455177661985,2.6257324218750004 1.7575368113083272,1.1051706266347496 0,1.7538777812611586 0))"
        );
}

#[test]
fn test_poly_concave_3() {
    let rect = ClipRect::new(0.0, 0.0, 4.0, 4.0);
    let g = wkt!(POLYGON((-2.142333984375 3.7875217118824196,0.40649414062500044 5.134714634014458,2.746582031249999 5.375397774474749,2.9003906250000004 2.964984369333976,5.592041015625 1.0216743684873961,5.075683593749999 -0.9667509997666315,1.2194824218749991 -1.1095497845377338,0.9448242187499992 0.47240675684429334,-0.8789062500000011 1.4939713066293194,-2.142333984375 3.7875217118824196))).orient(Direction::Default);

    let clip = rect.clip(&Geometry::Polygon(g)).unwrap();
    println!("{}", clip.to_wkt());

    assert_eq!(
            clip.to_wkt().to_string(),
            "POLYGON((4 2.1710915581037726,2.9003906250000004 2.964984369333976,2.8343462284983496 4,0 4,0 1.0016510416726798,0.9448242187499992 0.47240675684429334,1.0268431539007778 0,4 0,4 2.1710915581037726))"
        );
}

#[test]
fn test_poly_spiral() {
    let rect = ClipRect::new(0.0, 0.0, 4.0, 4.0);
    let g = wkt!(POLYGON((1.2414550781249996 4.434044005032575,1.2414550781249996 0.9337965488500259,4.39453125 0.99970513084196,4.361572265624999 4.193029605360763,2.515869140625 4.160158150193411,2.559814453125 2.910124912012904,3.62548828125 2.9430409100551316,3.6584472656249996 2.4052990502867857,2.17529296875 2.3723687086440606,2.0654296875 4.488809196778661,4.757080078125001 4.477856485570598,4.801025390624999 0.41747677467076016,0.4174804687500001 0.37353251022881295,0.5493164062499997 4.412136788910175,1.2414550781249996 4.434044005032575))).orient(Direction::Default);

    let clip = rect.clip(&Geometry::Polygon(g)).unwrap();
    println!("{}", clip.to_wkt());

    assert_eq!(
            clip.to_wkt().to_string(),
            "MULTIPOLYGON(((4 0.991458265298099,1.2414550781249996 0.9337965488500259,1.2414550781249996 4,0.5358626395041394 4,0.4174804687500001 0.37353251022881295,4 0.4094466364566678,4 0.991458265298099)),((2.0908035085756933 4,2.17529296875 2.3723687086440606,3.6584472656249996 2.4052990502867857,3.62548828125 2.9430409100551316,2.559814453125 2.910124912012904,2.5214995508770635 4,2.0908035085756933 4)))"
        );
}

#[test]
fn test_poly_alternating() {
    let rect = ClipRect::new(0.0, 0.0, 4.0, 4.0);
    let g = wkt!(POLYGON((0.6042480468750002 4.412136788910175,0.7031249999999996 -0.3845185979490111,1.7028808593749993 -0.34057416628374426,1.4062500000000002 4.3683204208762305,2.142333984375 4.401182938278325,2.373046875 -0.3515602939922502,3.779296875 -0.31860187370565995,3.581542968749999 4.390228926463408,4.262695312499999 4.3245014930191985,4.39453125 -0.6591651462894532,2.1313476562499996 -0.59325111814087,1.9226074218749998 4.160158150193411,1.6918945312499998 4.160158150193411,1.8786621093749998 -0.6371938961998609,0.1757812499999994 -0.5493079911125278,0.28564453124999956 4.423090477960898,0.6042480468750002 4.412136788910175))).orient(Direction::Default);

    let clip = rect.clip(&Geometry::Polygon(g)).unwrap();
    println!("{}", clip.to_wkt());

    assert_eq!(
            clip.to_wkt().to_string(),
            "MULTIPOLYGON(((0.6951986379166918 0,0.6127437228557678 4,0.27629650565158514 4,0.18791800426372474 0,0.6951986379166918 0)),((1.853855266008407 0,1.6981297104779016 4,1.4294518791135804 4,1.6814268204799387 0,1.853855266008407 0)),((2.355981048446358 0,2.1618086479190275 4,1.9296405738552318 4,2.105295748986531 0,2.355981048446358 0)),((3.597931175889893 4,3.765916745677536 0,4 0,4 4,3.597931175889893 4)))"
        );
}

#[test]
fn test_poly_complex() {
    let rect = ClipRect::new(0.0, 0.0, 4.0, 4.0);
    let g = wkt!(POLYGON((-0.28564453125000056 3.743671274749744,3.7573242187499987 3.6888551431470518,3.7573242187499987 2.7235830833483874,-0.20874023437500058 2.8113711933311407,-0.20874023437500058 3.0417830279332634,3.4716796875000004 2.975955935944782,3.4716796875000004 3.2282710112526445,-0.28564453125000056 3.2282710112526445,-0.30761718749999994 2.097919733594921,3.6804199218749987 1.9991059831233287,3.669433593749999 1.680667133750731,0.5053710937499998 1.6587038068676208,0.49438476562500006 1.2633253574893217,4.482421875 1.3621763466641852,4.39453125 0.8349313860427259,0.1867675781250001 0.9557662177941495,0.16479492187499967 1.7794990011582144,1.8127441406249998 1.8344033244935218,-0.2966308593750003 1.9002862838753884,-0.1867675781250001 0.5712795966325501,3.3508300781249996 0.41747677467076016,3.482666015625 -0.5383221578577064,2.801513671875 -0.6042368463810561,2.867431640625 0.08789059053081871,-0.5712890625000001 0.23071226715249793,-0.6042480468750002 3.721745231068965,-0.28564453125000056 3.743671274749744))).orient(Direction::Default);

    let clip = rect.clip(&Geometry::Polygon(g)).unwrap();
    println!("{}", clip.to_wkt());

    assert_eq!(
            clip.to_wkt().to_string(),
            "MULTIPOLYGON(((3.4084137812450663 0,3.3508300781249996 0.41747677467076016,0 0.5631595718705923,0 0.20698470426327326,2.867431640625 0.08789059053081871,2.859060972318771 0,3.4084137812450663 0)),((4 1.3502186145179023,0.49438476562500006 1.2633253574893217,0.5053710937499998 1.6587038068676208,3.669433593749999 1.680667133750731,3.6804199218749987 1.9991059831233287,0 2.0902977363133655,0 1.8910214927123135,1.8127441406249998 1.8344033244935218,0.16479492187499967 1.7794990011582144,0.1867675781250001 0.9557662177941495,4 0.8462611851788037,4 1.3502186145179023)),((0 3.2282710112526445,3.4716796875000004 3.2282710112526445,3.4716796875000004 2.975955935944782,0 3.038049551074215,0 2.806750766489943,3.7573242187499987 2.7235830833483874,3.7573242187499987 3.6888551431470518,0 3.73979839588651,0 3.2282710112526445)))"
        );
}

#[test]
fn test_poly_partial_cover() {
    let rect = ClipRect::new(0.0, 0.0, 4.0, 4.0);
    let g = wkt!(POLYGON((-0.28564453125000056 4.466903610394141,4.493408203125 4.466903610394141,4.251708984375 0.2856433479945224,3.5705566406249996 -0.17578097424708972,-0.2636718750000001 -0.241698501901638,-0.28564453125000056 4.466903610394141))).orient(Direction::Default);

    let clip = rect.clip(&Geometry::Polygon(g)).unwrap();
    println!("{}", clip.to_wkt());

    assert_eq!(
        clip.to_wkt().to_string(),
        "POLYGON((3.830043661190787 0,4 0.115131349345382,4 4,0 4,0 0,3.830043661190787 0))"
    );
}

#[test]
fn test_poly_full_cover() {
    let rect = ClipRect::new(0.0, 0.0, 4.0, 4.0);
    let g = wkt!(POLYGON((-1. -1., -1. 5., 5. 5., 5. -1., -1. -1.))).orient(Direction::Default);

    let clip = rect.clip(&Geometry::Polygon(g)).unwrap();
    println!("{}", clip.to_wkt());

    assert_eq!(clip.to_wkt().to_string(), "POLYGON((0 0,4 0,4 4,0 4,0 0))");
}

#[test]
fn test_poly_holes_1() {
    let rect = ClipRect::new(-1.0, -1.0, 5.0, 5.0);
    let g = wkt!(POLYGON((0. 0.,4. 0.,4. 4.,0. 4.,0. 0.),(1. 1.,1. 2.9999999999999716,3. 2.9999999999999716,3. 1.,1. 1.))).orient(Direction::Default);

    let clip = rect.clip(&Geometry::Polygon(g)).unwrap();
    println!("{}", clip.to_wkt());

    assert_eq!(
        clip.to_wkt().to_string(),
        "POLYGON((0 0,4 0,4 4,0 4,0 0),(1 1,1 2.9999999999999716,3 2.9999999999999716,3 1,1 1))"
    );
}

#[test]
fn test_poly_holes_2() {
    let rect = ClipRect::new(-1.0, 1.5, 5.0, 5.0);
    let g = wkt!(POLYGON((0. 0.,4. 0.,4. 4.,0. 4.,0. 0.),(1. 1.,1. 2.9999999999999716,3. 2.9999999999999716,3. 1.,1. 1.))).orient(Direction::Default);

    let clip = rect.clip(&Geometry::Polygon(g)).unwrap();
    println!("{}", clip.to_wkt());

    assert_eq!(
        clip.to_wkt().to_string(),
        "POLYGON((4 1.5,4 4,0 4,0 1.5,4 1.5),(3 1.5,1 1.5,1 2.9999999999999716,3 2.9999999999999716,3 1.5))"
    );
}

#[test]
fn test_poly_holes_3() {
    let rect = ClipRect::new(0., 0., 4., 4.);
    let g = wkt!(POLYGON((-0.7580566406250002 4.4559505716470795,4.438476562499999 4.423090477960898,4.416503906249999 -0.5822653680900771,0.7690429687499999 -0.4064907305738785,-0.7910156250000003 1.4500404973608028,-0.7580566406250002 4.4559505716470795),(3.9440917968750004 4.04509732498002,3.251953125 4.056056210178781,3.3068847656250004 3.4311748572202134,4.075927734375 3.4092413377324107,3.9440917968750004 4.04509732498002),(3.966064453124999 2.6632250332728233,3.218994140625001 2.6522505226124338,3.2849121093750018 1.8618548574369385,4.207763671875001 1.8508742952122503,3.966064453124999 2.6632250332728233),(4.119873046874999 0.7195855745039239,3.142089843750001 0.708600099655115,3.1640625 -0.016479491960268433,4.185791015625 0.016479491960282644,4.119873046874999 0.7195855745039239),(2.1533203125000004 0.7635272053184394,0.8239746093750006 0.8294388013836453,0.6811523437500001 -0.005493164054087174,2.5708007812499996 -0.13732897007314193,2.1533203125000004 0.7635272053184394),(2.373046875000001 2.377857153664536,2.4060058593750004 4.165636821607862,-0.4394531249999995 4.2752021711191475,2.373046875000001 2.377857153664536),(-0.4174804687500001 3.47504038275639,-0.42846679687499983 1.784989507880951,3.680419921875001 1.10405764536209,-0.4174804687500001 3.47504038275639))).orient(Direction::Default);

    let clip = rect.clip(&Geometry::Polygon(g)).unwrap();
    println!("{}", clip.to_wkt());

    assert_eq!(
        clip.to_wkt().to_string(),
        "POLYGON((0 0.508700719816457,0.42746543535350445 0,4 0,4 4,0 4,0 0.508700719816457),(4 3.7754472859435353,4 3.4114068375929523,3.3068847656250004 3.4311748572202134,3.2568808758086316 4,3.9534421029768883 4,4 3.7754472859435353),(4 2.5491677074239125,4 1.853346374168126,3.2849121093750018 1.8618548574369385,3.218994140625001 2.6522505226124338,3.966064453124999 2.6632250332728233,4 2.5491677074239125),(3.6749267578122797 0,3.1635631090142313 0,3.142089843750001 0.708600099655115,4 0.7182387909456804,4 0.010486233474371207,3.6749267578122797 0),(2.5071589210227896 0,0.6820919965218798 0,0.8239746093750006 0.8294388013836453,2.1533203125000004 0.7635272053184394,2.5071589210227896 0),(0 3.978742012141865,0 4,2.4029522272562405 4,2.373046875000001 2.377857153664536,0 3.978742012141865),(0 1.7139832441423533,0 3.233492543558043,3.680419921875001 1.10405764536209,0 1.7139832441423533))"
    );
}

#[test]
fn test_poly_holes_4() {
    let rect = ClipRect::new(0., 0., 4., 4.);
    let g = wkt!(POLYGON((-0.7580566406250002 4.4559505716470795,4.438476562499999 4.423090477960898,4.416503906249999 -0.5822653680900771,0.7690429687499999 -0.4064907305738785,-0.7910156250000003 1.4500404973608028,-0.7580566406250002 4.4559505716470795),(3.746337890624999 0.8569016474398126,3.131103515624999 0.27465715121469714,3.8342285156250004 -0.31860187370565995,4.295654296875001 0.19775351362549998,3.746337890624999 0.8569016474398126),(1.6699218749999993 3.5682478216285887,0.49438476562500006 2.6248138208185026,1.9775390624999991 0.6921218386632262,3.62548828125 1.603794430058997,1.6699218749999993 3.5682478216285887),(0.2966308593750003 3.4585910482810505,-0.46142578124999994 3.425691524417985,-0.5932617187500006 1.7245930431978707,0.31860351562499967 1.6587038068676208,0.2966308593750003 3.4585910482810505),(0.4504394531249992 1.334718132769936,-0.23071289062500103 1.334718132769936,0.878906249999999 -0.18127411164152818,1.680908203124999 -0.19226038138118895,0.4504394531249992 1.334718132769936))).orient(Direction::Default);

    let clip = rect.clip(&Geometry::Polygon(g)).unwrap();
    println!("{}", clip.to_wkt());

    assert_eq!(
        clip.to_wkt().to_string(),
        "POLYGON((0 0.508700719816457,0.42746543535350445 0,4 0,4 4,0 4,0 0.508700719816457),(4 0.55252168698067,4 0,3.456624580346703 0,3.131103515624999 0.27465715121469714,3.746337890624999 0.8569016474398126,4 0.55252168698067),(1.6699218749999993 3.5682478216285887,3.62548828125 1.603794430058997,1.9775390624999991 0.6921218386632262,0.49438476562500006 2.6248138208185026,1.6699218749999993 3.5682478216285887),(0 1.6817253472721658,0 3.4457173215520247,0.2966308593750003 3.4585910482810505,0.31860351562499967 1.6587038068676208,0 1.6817253472721658),(1.52598107811293 0,0.7462240250620205 0,0 1.0195118245259667,0 1.334718132769936,0.4504394531249992 1.334718132769936,1.52598107811293 0))");
}

#[test]
fn test_poly_holes_5() {
    let rect = ClipRect::new(0., 0., 4., 4.);
    let g = wkt!(POLYGON((-0.20874023437500058 2.8991526985043095,1.7028808593749993 4.587376153449682,4.812011718749999 2.1857489471296248,2.340087890625 -1.0985654960406492,-0.20874023437500058 2.8991526985043095),(4.207763671874999 2.471157337748167,3.4387207031249987 2.8333171968552904,3.4387207031249987 1.1315182387740492,4.251708984375 1.9222467160981012,4.207763671874999 2.471157337748167),(1.7687988281249998 2.8991526985043095,1.2524414062499993 2.7345569512697807,1.8786621093749998 1.7355743631421205,2.8454589843750004 2.3613917533090927,1.7687988281249998 2.8991526985043095),(2.1313476562499996 3.4476246666468597,1.7797851562499993 4.269724272266757,1.3732910156250002 3.4476246666468597,2.1313476562499996 3.4476246666468597))).orient(Direction::Default);

    let clip = rect.clip(&Geometry::Polygon(g)).unwrap();
    println!("{}", clip.to_wkt());

    assert_eq!(
        clip.to_wkt().to_string(),
        "POLYGON((3.166918047544312 0,4 1.106871926094136,4 2.8129819340334725,2.4632941824525925 4,1.0377789490733906 4,0 3.0834989378374256,0 2.57175336360623,1.6396746805883928 0,3.166918047544312 0),(4 2.5689979853990117,4 1.6774295809266007,3.4387207031249987 1.1315182387740492,3.4387207031249987 2.8333171968552904,4 2.5689979853990117),(1.7687988281249998 2.8991526985043095,2.8454589843750004 2.3613917533090927,1.8786621093749998 1.7355743631421205,1.2524414062499993 2.7345569512697807,1.7687988281249998 2.8991526985043095),(1.646417696259425 4,1.895129986512118 4,2.1313476562499996 3.4476246666468597,1.3732910156250002 3.4476246666468597,1.646417696259425 4))"
    );
}

#[test]
fn test_poly_neg() {
    let rect = ClipRect::new(-1., -1., 1., 1.);
    let g = wkt!(POLYGON((-0.0219726562499994 0.6262082358143743,-0.26916503906249944 -0.021972655711422817,1.7633056640625009 -0.4064907305738785,0.7470703125000004 0.560293804172062,-0.0219726562499994 0.6262082358143743),(0.17578125000000042 0.45592780548687983,0.422973632812501 0.40649073057389273,0.36254882812500056 0.19775351362549998,0.10437011718750029 0.23620538561262094,0.17578125000000042 0.45592780548687983)));

    let clip = rect.clip(&Geometry::Polygon(g)).unwrap();
    println!("{}", clip.to_wkt());

    assert_eq!(
        clip.to_wkt().to_string(),
        "POLYGON((1 0.31967187552418397,0.7470703125000004 0.560293804172062,-0.0219726562499994 0.6262082358143743,-0.26916503906249944 -0.021972655711422817,1 -0.2620828313477561,1 0.31967187552418397),(0.17578125000000042 0.45592780548687983,0.422973632812501 0.40649073057389273,0.36254882812500056 0.19775351362549998,0.10437011718750029 0.23620538561262094,0.17578125000000042 0.45592780548687983))"
    );
}

#[test]
fn test_poly_osm_1() {
    let rect = ClipRect::new(
        -40701.18882128954,
        4851268.621429991,
        1565.430339280367,
        4893535.240590561,
    );
    let g = wkt!(POLYGON((-23714.235791431638 4883754.923742886,-25588.34223474753 4885147.654317883,-26188.666685525593 4885365.0791584095,-26193.350654483478 4883753.278687337,-26438.726505290182 4883659.104415881,-27423.49684970543 4883754.703220243,-28424.207300468515 4883015.280940808,-29308.453234305103 4882731.532533518,-30176.134105180477 4882954.908911108,-31149.596739659326 4883752.21452551,-30854.327575771193 4874956.077899112,-31150.097866057884 4872432.053513398,-33611.95085836651 4870816.275565053,-34128.89200399272 4869838.7898921305,-34844.86415084541 4865963.578452767,-32847.16684993201 4864454.418419109,-31035.961471082283 4864674.437483483,-29271.680708651747 4865536.580944964,-27422.50942402108 4865961.933318165,-26473.01042334732 4865590.094673743,-24912.769013954527 4864390.978655975,-23714.617533918878 4864344.4836069895,-22544.04250143567 4864987.383681261,-20093.026264610413 4867094.427966255,-18773.863108929374 4867574.409545303,-18771.674764598472 4865963.236398067,-16299.786472972157 4865962.485427853,-16299.914305498625 4864347.459968935,-15453.378869551036 4864117.427463171,-12592.707254779683 4865962.250100052,-6408.544992098486 4866749.705079893,3910.7605042473956 4865086.241404312,4508.135140982094 4866360.085200486,7366.313717464343 4870583.025972685,13028.31578945334 4874133.106664421,16090.326587486996 4877406.224303334,19134.00372650727 4883481.4844809435,17525.192668790605 4884636.248937247,12413.46861575614 4885116.051539302,8423.347100398072 4883754.52896433,2252.593955326875 4878909.6915348815,2252.3418399531124 4880509.560058044,1738.4759383239204 4880716.472172194,1289.1187557081 4880098.138426283,1011.2516821912805 4878904.673193749,-3930.6571800881015 4878904.594347052,-3935.008426915177 4877279.778806011,-6403.976136442385 4877281.232887783,-9235.215379771613 4876098.869209311,-10162.65454498546 4876354.014939786,-12244.519074389009 4877867.024280159,-15058.761527072367 4878903.797094984,-16294.095618028978 4882137.566443686,-17105.58776983645 4882333.358751661,-20002.064829662817 4882137.962502141,-20635.61553978507 4882403.477049628,-21240.50647146651 4883754.617321803,-23714.235791431638 4883754.923742886),(-31138.51571132672 4869204.093103909,-30279.976606608427 4872412.335600809,-28456.73438831681 4873539.419514657,-26118.561711801234 4873305.271239855,-23724.075352855645 4872424.2048876155,-24859.767133120058 4870690.063240724,-26521.452164625618 4869636.926949294,-28645.593475825088 4869168.70893825,-31138.51571132672 4869204.093103909))).orient(Direction::Default);

    let clip = rect.clip(&Geometry::Polygon(g)).unwrap();
    println!("{}", clip.to_wkt());

    assert_eq!(
        clip.to_wkt().to_string(),
        "POLYGON((1565.430339280367 4880478.354395046,1289.1187557081 4880098.138426283,1011.2516821912805 4878904.673193749,-3930.6571800881015 4878904.594347052,-3935.008426915177 4877279.778806011,-6403.976136442385 4877281.232887783,-9235.215379771613 4876098.869209311,-10162.65454498546 4876354.014939786,-12244.519074389009 4877867.024280159,-15058.761527072367 4878903.797094984,-16294.095618028978 4882137.566443686,-17105.58776983645 4882333.358751661,-20002.064829662817 4882137.962502141,-20635.61553978507 4882403.477049628,-21240.50647146651 4883754.617321803,-23714.235791431638 4883754.923742886,-25588.34223474753 4885147.654317883,-26188.666685525593 4885365.0791584095,-26193.350654483478 4883753.278687337,-26438.726505290182 4883659.104415881,-27423.49684970543 4883754.703220243,-28424.207300468515 4883015.280940808,-29308.453234305103 4882731.532533518,-30176.134105180477 4882954.908911108,-31149.596739659326 4883752.21452551,-30854.327575771193 4874956.077899112,-31150.097866057884 4872432.053513398,-33611.95085836651 4870816.275565053,-34128.89200399272 4869838.7898921305,-34844.86415084541 4865963.578452767,-32847.16684993201 4864454.418419109,-31035.961471082283 4864674.437483483,-29271.680708651747 4865536.580944964,-27422.50942402108 4865961.933318165,-26473.01042334732 4865590.094673743,-24912.769013954527 4864390.978655975,-23714.617533918878 4864344.4836069895,-22544.04250143567 4864987.383681261,-20093.026264610413 4867094.427966255,-18773.863108929374 4867574.409545303,-18771.674764598472 4865963.236398067,-16299.786472972157 4865962.485427853,-16299.914305498625 4864347.459968935,-15453.378869551036 4864117.427463171,-12592.707254779683 4865962.250100052,-6408.544992098486 4866749.705079893,1565.4303392803668 4865464.306724506,1565.430339280367 4880478.354395046),(-31138.51571132672 4869204.093103909,-30279.976606608427 4872412.335600809,-28456.73438831681 4873539.419514657,-26118.561711801234 4873305.271239855,-23724.075352855645 4872424.2048876155,-24859.767133120058 4870690.063240724,-26521.452164625618 4869636.926949294,-28645.593475825088 4869168.70893825,-31138.51571132672 4869204.093103909))"
    );
}

#[test]
fn test_poly_osm_2() {
    let rect = ClipRect::new(
        2191602.4749925733,
        4945781.478164047,
        2194048.4598977007,
        4948227.463069171,
    );
    let g = wkt!(POLYGON((2190755.7566817016 4946580.49077044,2190795.163781442 4946581.677500468,2190860.8534129597 4946591.229949868,2190938.4876258387 4946635.41747487,2190986.2659512875 4946682.007985357,2191042.3932385454 4946782.383450222,2191048.3710952005 4946848.080048405,2191051.9444508553 4946885.104172578,2191037.6176323905 4946934.069414085,2190999.401651201 4947032.000630332,2190993.4237945457 4947089.332749089,2191024.4819324766 4947144.262302655,2191061.44000342 4947232.5839261785,2190955.207813356 4947268.481296405,2190973.119119425 4947297.140678939,2191069.8000971787 4947337.683005727,2191123.5451473338 4947430.841614478,2191077.0247321306 4947494.139569703,2191065.091282718 4947567.0059854835,2191074.5868352824 4947627.916453197,2191122.409688527 4947662.599104055,2191153.467826459 4947710.381360023,2191145.0520729544 4947773.622508105,2191097.329407252 4947823.83767676,2191130.7697822857 4947919.389339428,2191209.5951137166 4948045.991963985,2191319.478583079 4948019.704201263,2191369.583485885 4948035.177925974,2191376.8081208374 4948127.200202197,2191423.3841957855 4948191.689576228,2191362.4145106776 4948199.998054024,2191343.3009541086 4948251.343723735,2191383.977096044 4948269.2649497045,2191422.1930772336 4948219.164728058,2191524.907571389 4948271.653472074,2191524.8407796943 4948349.2880925415,2191366.054658027 4948367.194843822,2191370.830264182 4948394.6704873,2191505.7940148194 4948400.634543812,2191487.8159170565 4948438.866137169,2191530.874296095 4948463.938757846,2191625.228696492 4948506.933102868,2191602.4749925733 4948573.8135697525,2191529.683177544 4948576.260782165,2191450.7910544183 4948561.870595789,2191342.1766272513 4948523.653176833,2191305.084972919 4948522.466211834,2191290.8138141995 4948490.213057407,2191343.367745803 4948473.493040452,2191331.3675046954 4948443.6432650965,2191330.1652541948 4948379.13758073,2191240.653251648 4948344.511010572,2191237.0687640444 4948283.596092647,2191253.788951562 4948238.214211838,2191287.1736668507 4948171.336033381,2191251.406714459 4948096.149914075,2191191.6838076483 4948088.98447693,2191149.8833388546 4948084.207521741,2191108.0828700624 4948078.229004414,2191123.6119390284 4948131.977178323,2191137.9387574927 4948237.012627921,2191109.2183288685 4948318.23710133,2191080.553559989 4948311.071501933,2191049.495422058 4948254.933827706,2191028.06642008 4948121.221658665,2191017.257297524 4948065.041111432,2191016.121838718 4947968.359744159,2190982.6146719893 4947869.159028682,2190927.6785032824 4947793.916614469,2190930.1275320803 4947706.7914553685,2190902.6538817524 4947656.635496296,2190833.324102886 4947682.849022814,2190780.836962977 4947664.987478696,2190845.3354759426 4947575.357891564,2190911.013975511 4947529.979287501,2190894.293787994 4947460.702960054,2190836.90859049 4947325.741536807,2190785.556909387 4947250.503290896,2190744.9475591457 4947168.100857593,2190692.393627542 4947023.57592862,2190613.568296111 4947021.187710146,2190483.391283578 4947054.637473377,2190446.4220806854 4946997.364163833,2190605.2749940474 4946919.740242711,2190642.2330649905 4946868.313634368,2190611.1860590084 4946813.370974609,2190635.130881478 4946685.582863856,2190716.338450012 4946594.819446295,2190755.7566817016 4946580.49077044)));

    assert_eq!(rect.clip(&Geometry::Polygon(g)), None);
}
