use geo::{orient::Direction, wkt, Area, Geometry, Orient};
use klippa::*;
use wkt::ToWkt;

#[test]
fn test_poly_corner() {
    let rect = ClipRect::new(0.0, 0.0, 4.0, 4.0);
    let g = wkt!(POLYGON((-1.1425781250000002 0.010986328057683181,-0.7031250000000007 0.4394488164139716,0.46142578124999994 0.40649073057389273,0.7360839843749998 -0.4833927027897005,0.0109863281249997 -0.9557662177941353,-1.1425781250000002 0.010986328057683181))).orient(Direction::Default);

    let clip = rect.clip(&Geometry::Polygon(g)).unwrap();
    assert_eq!(
            clip.to_wkt().to_string(),
            "POLYGON((0.5868871725519964 0,0.46142578124999994 0.40649073057389273,0 0.4195495947746787,0 0,0.5868871725519964 0))"
        );
}

#[test]
fn test_poly_diagonal() {
    let rect = ClipRect::new(0.0, 0.0, 4.0, 4.0);
    let g = wkt!(POLYGON((0.2526855468749994 4.937724274302482,5.174560546875 0.0549316322096729,3.3508300781249996 -1.0436434559084802,-1.3073730468750009 4.039617826768435,0.2526855468749994 4.937724274302482))).orient(Direction::Default);

    let clip = rect.clip(&Geometry::Polygon(g)).unwrap();
    assert_eq!(
            clip.to_wkt().to_string(),
            "POLYGON((4 1.220165531074182,1.1979154595268593 4,0 4,0 2.612947796960526,2.3944552358035853 0,4 0,4 1.220165531074182))"
        );
}

#[test]
fn test_poly_angle() {
    let rect = ClipRect::new(0.0, 0.0, 4.0, 4.0);
    let g = wkt!(POLYGON((2.7465820312500004 4.423090477960912,1.1755371093750002 4.543570279371764,1.109619140625 1.603794430058997,4.7900390625 1.5159363834516881,4.746093749999999 3.217302058187144,2.7026367187499996 3.19536379832941,2.7465820312500004 4.423090477960912)));

    let clip = rect.clip(&Geometry::Polygon(g)).unwrap();
    println!("{}", clip.to_wkt());
    assert_eq!(
            clip.to_wkt().to_string(),
            "POLYGON((4 3.209292103333472,2.7026367187499996 3.19536379832941,2.731437908719937 4,1.1633487485863934 4,1.109619140625 1.603794430058997,4 1.5347959946504444,4 3.209292103333472))"
        );
}

#[test]
fn test_poly_cross() {
    let rect = ClipRect::new(0.0, 0.0, 4.0, 4.0);
    let g = wkt!(POLYGON((1.3732910156250002 4.532618393971788,2.867431640625 4.5764249358536375,2.933349609374999 2.8223442468940902,4.812011718749999 2.8113711933311407,4.822998046874999 1.537901237431484,3.021240234375 1.5488835798473986,3.0322265624999996 -0.3515602939922644,1.417236328125 -0.37353251022881295,1.3952636718749996 1.4939713066293194,-0.7690429687499999 1.482988685660274,-0.7360839843749998 2.8333171968552904,1.3293457031250002 2.7126091154394203,1.109619140625 4.4449973697272895,1.3732910156250002 4.532618393971788))).orient(Direction::Default);

    let clip = rect.clip(&Geometry::Polygon(g)).unwrap();
    println!("{}", clip.to_wkt());

    assert_eq!(
            clip.to_wkt().to_string(),
            "POLYGON((3.0301942179521353 0,3.021240234375 1.5488835798473986,4 1.5429176976325745,4 2.8161140622265752,2.933349609374999 2.8223442468940902,2.889093563675335 4,1.1660601503869326 4,1.3293457031250002 2.7126091154394203,0 2.7902988912443156,0 1.4868911398117115,1.3952636718749996 1.4939713066293194,1.4128414233481703 0,3.0301942179521353 0))"
        );
}

#[test]
fn test_poly_star() {
    let rect = ClipRect::new(0.0, 0.0, 4.0, 4.0);
    let g = wkt!(POLYGON((1.9335937500000013 -1.120534032250049,1.0986328124999993 0.5932511181408557,-2.1093749999999987 0.46142079353062115,0.28564453125000056 2.482133403730572,-0.8569335937499997 5.156598738411162,1.7797851562500016 3.798483975036973,4.987792968750002 4.609278084409837,3.8452148437499996 2.2625953010152386,6.26220703125 0.9008417889908884,2.7026367187500018 0.6811362994451144,1.9335937500000013 -1.120534032250049))).orient(Direction::Default);

    let clip = rect.clip(&Geometry::Polygon(g)).unwrap();
    println!("{}", clip.to_wkt());

    assert_eq!(
            clip.to_wkt().to_string(),
            "POLYGON((2.4118936939948554 0,2.7026367187500018 0.6811362994451144,4 0.7612127721094657,4 2.17538805590176,3.8452148437499996 2.2625953010152386,4 2.5805006182528833,4 4,2.577108391522845 4,1.7797851562500016 3.798483975036973,1.388550854278802 4,0 4,0 3.1507497374007207,0.28564453125000056 2.482133403730572,0 2.241130982330577,0 0.5481037466989945,1.0986328124999993 0.5932511181408557,1.3876664230799653 0,2.4118936939948554 0))"
        );
}

#[test]
fn test_poly_concave_1() {
    let rect = ClipRect::new(0.0, 0.0, 4.0, 4.0);
    let g = wkt!(POLYGON((3.7353515625000004 4.740675384778385,3.790283203125001 2.756504385543252,0.5712890625000011 2.7784514150468738,0.5603027343750014 4.718777551249872,2.13134765625 3.1624555302378496,3.7353515625000004 4.740675384778385))).orient(Direction::Default);

    let clip = rect.clip(&Geometry::Polygon(g)).unwrap();
    println!("{}", clip.to_wkt());

    assert_eq!(
            clip.to_wkt().to_string(),
            "POLYGON((2.9825754476705333 4,2.13134765625 3.1624555302378496,1.285879964924343 4,0.5643725275296553 4,0.5712890625000011 2.7784514150468738,3.790283203125001 2.756504385543252,3.755857110697265 4,2.9825754476705333 4))"
        );
}

#[test]
fn test_poly_concave_2() {
    let rect = ClipRect::new(0.0, 0.0, 4.0, 4.0);
    let g = wkt!(POLYGON((3.735351562499999 5.189423479732426,2.065429687499999 2.6467632307409588,5.284423828124999 2.668712251961324,-0.12084960937499983 -1.417091829441631,2.6257324218750004 1.7575368113083272,-0.8349609375000002 1.691648704756986,1.8566894531249996 5.145656780300527,3.735351562499999 5.189423479732426))).orient(Direction::Default);

    let clip = rect.clip(&Geometry::Polygon(g)).unwrap();
    println!("{}", clip.to_wkt());

    assert_eq!(
            clip.to_wkt().to_string(),
            "POLYGON((1.7538777812611586 0,4 1.697826286637885,4 2.6599542845255755,2.065429687499999 2.6467632307409588,2.954183772492809 4,0.9638983962503497 4,0 2.763096107782738,0 1.7075455177661985,2.6257324218750004 1.7575368113083272,1.1051706266347496 0,1.7538777812611586 0))"
        );
}

#[test]
fn test_poly_concave_3() {
    let rect = ClipRect::new(0.0, 0.0, 4.0, 4.0);
    let g = wkt!(POLYGON((-2.142333984375 3.7875217118824196,0.40649414062500044 5.134714634014458,2.746582031249999 5.375397774474749,2.9003906250000004 2.964984369333976,5.592041015625 1.0216743684873961,5.075683593749999 -0.9667509997666315,1.2194824218749991 -1.1095497845377338,0.9448242187499992 0.47240675684429334,-0.8789062500000011 1.4939713066293194,-2.142333984375 3.7875217118824196))).orient(Direction::Default);

    let clip = rect.clip(&Geometry::Polygon(g)).unwrap();
    println!("{}", clip.to_wkt());

    assert_eq!(
            clip.to_wkt().to_string(),
            "POLYGON((4 2.1710915581037726,2.9003906250000004 2.964984369333976,2.8343462284983496 4,0 4,0 1.0016510416726798,0.9448242187499992 0.47240675684429334,1.0268431539007778 0,4 0,4 2.1710915581037726))"
        );
}

#[test]
fn test_poly_spiral() {
    let rect = ClipRect::new(0.0, 0.0, 4.0, 4.0);
    let g = wkt!(POLYGON((1.2414550781249996 4.434044005032575,1.2414550781249996 0.9337965488500259,4.39453125 0.99970513084196,4.361572265624999 4.193029605360763,2.515869140625 4.160158150193411,2.559814453125 2.910124912012904,3.62548828125 2.9430409100551316,3.6584472656249996 2.4052990502867857,2.17529296875 2.3723687086440606,2.0654296875 4.488809196778661,4.757080078125001 4.477856485570598,4.801025390624999 0.41747677467076016,0.4174804687500001 0.37353251022881295,0.5493164062499997 4.412136788910175,1.2414550781249996 4.434044005032575))).orient(Direction::Default);

    let clip = rect.clip(&Geometry::Polygon(g)).unwrap();
    println!("{}", clip.to_wkt());

    assert_eq!(
            clip.to_wkt().to_string(),
            "MULTIPOLYGON(((4 0.991458265298099,1.2414550781249996 0.9337965488500259,1.2414550781249996 4,0.5358626395041394 4,0.4174804687500001 0.37353251022881295,4 0.4094466364566678,4 0.991458265298099)),((2.0908035085756933 4,2.17529296875 2.3723687086440606,3.6584472656249996 2.4052990502867857,3.62548828125 2.9430409100551316,2.559814453125 2.910124912012904,2.5214995508770635 4,2.0908035085756933 4)))"
        );
}

#[test]
fn test_poly_alternating() {
    let rect = ClipRect::new(0.0, 0.0, 4.0, 4.0);
    let g = wkt!(POLYGON((0.6042480468750002 4.412136788910175,0.7031249999999996 -0.3845185979490111,1.7028808593749993 -0.34057416628374426,1.4062500000000002 4.3683204208762305,2.142333984375 4.401182938278325,2.373046875 -0.3515602939922502,3.779296875 -0.31860187370565995,3.581542968749999 4.390228926463408,4.262695312499999 4.3245014930191985,4.39453125 -0.6591651462894532,2.1313476562499996 -0.59325111814087,1.9226074218749998 4.160158150193411,1.6918945312499998 4.160158150193411,1.8786621093749998 -0.6371938961998609,0.1757812499999994 -0.5493079911125278,0.28564453124999956 4.423090477960898,0.6042480468750002 4.412136788910175))).orient(Direction::Default);

    let clip = rect.clip(&Geometry::Polygon(g)).unwrap();
    println!("{}", clip.to_wkt());

    assert_eq!(
            clip.to_wkt().to_string(),
            "MULTIPOLYGON(((0.6951986379166918 0,0.6127437228557678 4,0.27629650565158514 4,0.18791800426372474 0,0.6951986379166918 0)),((1.853855266008407 0,1.6981297104779016 4,1.4294518791135804 4,1.6814268204799387 0,1.853855266008407 0)),((2.355981048446358 0,2.1618086479190275 4,1.9296405738552318 4,2.105295748986531 0,2.355981048446358 0)),((3.597931175889893 4,3.765916745677536 0,4 0,4 4,3.597931175889893 4)))"
        );
}

#[test]
fn test_poly_complex() {
    let rect = ClipRect::new(0.0, 0.0, 4.0, 4.0);
    let g = wkt!(POLYGON((-0.28564453125000056 3.743671274749744,3.7573242187499987 3.6888551431470518,3.7573242187499987 2.7235830833483874,-0.20874023437500058 2.8113711933311407,-0.20874023437500058 3.0417830279332634,3.4716796875000004 2.975955935944782,3.4716796875000004 3.2282710112526445,-0.28564453125000056 3.2282710112526445,-0.30761718749999994 2.097919733594921,3.6804199218749987 1.9991059831233287,3.669433593749999 1.680667133750731,0.5053710937499998 1.6587038068676208,0.49438476562500006 1.2633253574893217,4.482421875 1.3621763466641852,4.39453125 0.8349313860427259,0.1867675781250001 0.9557662177941495,0.16479492187499967 1.7794990011582144,1.8127441406249998 1.8344033244935218,-0.2966308593750003 1.9002862838753884,-0.1867675781250001 0.5712795966325501,3.3508300781249996 0.41747677467076016,3.482666015625 -0.5383221578577064,2.801513671875 -0.6042368463810561,2.867431640625 0.08789059053081871,-0.5712890625000001 0.23071226715249793,-0.6042480468750002 3.721745231068965,-0.28564453125000056 3.743671274749744))).orient(Direction::Default);

    let clip = rect.clip(&Geometry::Polygon(g)).unwrap();
    println!("{}", clip.to_wkt());

    assert_eq!(
            clip.to_wkt().to_string(),
            "MULTIPOLYGON(((3.4084137812450663 0,3.3508300781249996 0.41747677467076016,0 0.5631595718705923,0 0.20698470426327326,2.867431640625 0.08789059053081871,2.859060972318771 0,3.4084137812450663 0)),((4 1.3502186145179023,0.49438476562500006 1.2633253574893217,0.5053710937499998 1.6587038068676208,3.669433593749999 1.680667133750731,3.6804199218749987 1.9991059831233287,0 2.0902977363133655,0 1.8910214927123135,1.8127441406249998 1.8344033244935218,0.16479492187499967 1.7794990011582144,0.1867675781250001 0.9557662177941495,4 0.8462611851788037,4 1.3502186145179023)),((0 3.2282710112526445,3.4716796875000004 3.2282710112526445,3.4716796875000004 2.975955935944782,0 3.038049551074215,0 2.806750766489943,3.7573242187499987 2.7235830833483874,3.7573242187499987 3.6888551431470518,0 3.73979839588651,0 3.2282710112526445)))"
        );
}

#[test]
fn test_poly_partial_cover() {
    let rect = ClipRect::new(0.0, 0.0, 4.0, 4.0);
    let g = wkt!(POLYGON((-0.28564453125000056 4.466903610394141,4.493408203125 4.466903610394141,4.251708984375 0.2856433479945224,3.5705566406249996 -0.17578097424708972,-0.2636718750000001 -0.241698501901638,-0.28564453125000056 4.466903610394141))).orient(Direction::Default);

    let clip = rect.clip(&Geometry::Polygon(g)).unwrap();
    println!("{}", clip.to_wkt());

    assert_eq!(
        clip.to_wkt().to_string(),
        "POLYGON((3.830043661190787 0,4 0.115131349345382,4 4,0 4,0 0,3.830043661190787 0))"
    );
}

#[test]
fn test_poly_full_cover() {
    let rect = ClipRect::new(0.0, 0.0, 4.0, 4.0);
    let g = wkt!(POLYGON((-1. -1., -1. 5., 5. 5., 5. -1., -1. -1.))).orient(Direction::Default);

    let clip = rect.clip(&Geometry::Polygon(g)).unwrap();
    println!("{}", clip.to_wkt());

    assert_eq!(clip.to_wkt().to_string(), "POLYGON((0 0,4 0,4 4,0 4,0 0))");
}

#[test]
fn test_poly_holes_1() {
    let rect = ClipRect::new(-1.0, -1.0, 5.0, 5.0);
    let g = wkt!(POLYGON((0. 0.,4. 0.,4. 4.,0. 4.,0. 0.),(1. 1.,1. 2.9999999999999716,3. 2.9999999999999716,3. 1.,1. 1.))).orient(Direction::Default);

    let clip = rect.clip(&Geometry::Polygon(g)).unwrap();
    println!("{}", clip.to_wkt());

    assert_eq!(
        clip.to_wkt().to_string(),
        "POLYGON((0 0,4 0,4 4,0 4,0 0),(1 1,1 2.9999999999999716,3 2.9999999999999716,3 1,1 1))"
    );
}

#[test]
fn test_poly_holes_2() {
    let rect = ClipRect::new(-1.0, 1.5, 5.0, 5.0);
    let g = wkt!(POLYGON((0. 0.,4. 0.,4. 4.,0. 4.,0. 0.),(1. 1.,1. 2.9999999999999716,3. 2.9999999999999716,3. 1.,1. 1.))).orient(Direction::Default);

    let clip = rect.clip(&Geometry::Polygon(g)).unwrap();
    println!("{}", clip.to_wkt());

    assert_eq!(
        clip.to_wkt().to_string(),
        "POLYGON((4 1.5,4 4,0 4,0 1.5,4 1.5),(3 1.5,1 1.5,1 2.9999999999999716,3 2.9999999999999716,3 1.5))"
    );
}

#[test]
fn test_poly_holes_3() {
    let rect = ClipRect::new(0., 0., 4., 4.);
    let g = wkt!(POLYGON((-0.7580566406250002 4.4559505716470795,4.438476562499999 4.423090477960898,4.416503906249999 -0.5822653680900771,0.7690429687499999 -0.4064907305738785,-0.7910156250000003 1.4500404973608028,-0.7580566406250002 4.4559505716470795),(3.9440917968750004 4.04509732498002,3.251953125 4.056056210178781,3.3068847656250004 3.4311748572202134,4.075927734375 3.4092413377324107,3.9440917968750004 4.04509732498002),(3.966064453124999 2.6632250332728233,3.218994140625001 2.6522505226124338,3.2849121093750018 1.8618548574369385,4.207763671875001 1.8508742952122503,3.966064453124999 2.6632250332728233),(4.119873046874999 0.7195855745039239,3.142089843750001 0.708600099655115,3.1640625 -0.016479491960268433,4.185791015625 0.016479491960282644,4.119873046874999 0.7195855745039239),(2.1533203125000004 0.7635272053184394,0.8239746093750006 0.8294388013836453,0.6811523437500001 -0.005493164054087174,2.5708007812499996 -0.13732897007314193,2.1533203125000004 0.7635272053184394),(2.373046875000001 2.377857153664536,2.4060058593750004 4.165636821607862,-0.4394531249999995 4.2752021711191475,2.373046875000001 2.377857153664536),(-0.4174804687500001 3.47504038275639,-0.42846679687499983 1.784989507880951,3.680419921875001 1.10405764536209,-0.4174804687500001 3.47504038275639))).orient(Direction::Default);

    let clip = rect.clip(&Geometry::Polygon(g)).unwrap();
    println!("{}", clip.to_wkt());

    assert_eq!(
        clip.to_wkt().to_string(),
        "POLYGON((0 0.508700719816457,0.42746543535350445 0,4 0,4 4,0 4,0 0.508700719816457),(4 3.7754472859435353,4 3.4114068375929523,3.3068847656250004 3.4311748572202134,3.2568808758086316 4,3.9534421029768883 4,4 3.7754472859435353),(4 2.5491677074239125,4 1.853346374168126,3.2849121093750018 1.8618548574369385,3.218994140625001 2.6522505226124338,3.966064453124999 2.6632250332728233,4 2.5491677074239125),(3.6749267578122797 0,3.1635631090142313 0,3.142089843750001 0.708600099655115,4 0.7182387909456804,4 0.010486233474371207,3.6749267578122797 0),(2.5071589210227896 0,0.6820919965218798 0,0.8239746093750006 0.8294388013836453,2.1533203125000004 0.7635272053184394,2.5071589210227896 0),(0 3.978742012141865,0 4,2.4029522272562405 4,2.373046875000001 2.377857153664536,0 3.978742012141865),(0 1.7139832441423533,0 3.233492543558043,3.680419921875001 1.10405764536209,0 1.7139832441423533))"
    );
}

#[test]
fn test_poly_holes_4() {
    let rect = ClipRect::new(0., 0., 4., 4.);
    let g = wkt!(POLYGON((-0.7580566406250002 4.4559505716470795,4.438476562499999 4.423090477960898,4.416503906249999 -0.5822653680900771,0.7690429687499999 -0.4064907305738785,-0.7910156250000003 1.4500404973608028,-0.7580566406250002 4.4559505716470795),(3.746337890624999 0.8569016474398126,3.131103515624999 0.27465715121469714,3.8342285156250004 -0.31860187370565995,4.295654296875001 0.19775351362549998,3.746337890624999 0.8569016474398126),(1.6699218749999993 3.5682478216285887,0.49438476562500006 2.6248138208185026,1.9775390624999991 0.6921218386632262,3.62548828125 1.603794430058997,1.6699218749999993 3.5682478216285887),(0.2966308593750003 3.4585910482810505,-0.46142578124999994 3.425691524417985,-0.5932617187500006 1.7245930431978707,0.31860351562499967 1.6587038068676208,0.2966308593750003 3.4585910482810505),(0.4504394531249992 1.334718132769936,-0.23071289062500103 1.334718132769936,0.878906249999999 -0.18127411164152818,1.680908203124999 -0.19226038138118895,0.4504394531249992 1.334718132769936))).orient(Direction::Default);

    let clip = rect.clip(&Geometry::Polygon(g)).unwrap();
    println!("{}", clip.to_wkt());

    assert_eq!(
        clip.to_wkt().to_string(),
        "POLYGON((0 0.508700719816457,0.42746543535350445 0,4 0,4 4,0 4,0 0.508700719816457),(4 0.55252168698067,4 0,3.456624580346703 0,3.131103515624999 0.27465715121469714,3.746337890624999 0.8569016474398126,4 0.55252168698067),(1.6699218749999993 3.5682478216285887,3.62548828125 1.603794430058997,1.9775390624999991 0.6921218386632262,0.49438476562500006 2.6248138208185026,1.6699218749999993 3.5682478216285887),(0 1.6817253472721658,0 3.4457173215520247,0.2966308593750003 3.4585910482810505,0.31860351562499967 1.6587038068676208,0 1.6817253472721658),(1.52598107811293 0,0.7462240250620205 0,0 1.0195118245259667,0 1.334718132769936,0.4504394531249992 1.334718132769936,1.52598107811293 0))");
}

#[test]
fn test_poly_holes_5() {
    let rect = ClipRect::new(0., 0., 4., 4.);
    let g = wkt!(POLYGON((-0.20874023437500058 2.8991526985043095,1.7028808593749993 4.587376153449682,4.812011718749999 2.1857489471296248,2.340087890625 -1.0985654960406492,-0.20874023437500058 2.8991526985043095),(4.207763671874999 2.471157337748167,3.4387207031249987 2.8333171968552904,3.4387207031249987 1.1315182387740492,4.251708984375 1.9222467160981012,4.207763671874999 2.471157337748167),(1.7687988281249998 2.8991526985043095,1.2524414062499993 2.7345569512697807,1.8786621093749998 1.7355743631421205,2.8454589843750004 2.3613917533090927,1.7687988281249998 2.8991526985043095),(2.1313476562499996 3.4476246666468597,1.7797851562499993 4.269724272266757,1.3732910156250002 3.4476246666468597,2.1313476562499996 3.4476246666468597))).orient(Direction::Default);

    let clip = rect.clip(&Geometry::Polygon(g)).unwrap();
    println!("{}", clip.to_wkt());

    assert_eq!(
        clip.to_wkt().to_string(),
        "POLYGON((3.166918047544312 0,4 1.106871926094136,4 2.8129819340334725,2.4632941824525925 4,1.0377789490733906 4,0 3.0834989378374256,0 2.57175336360623,1.6396746805883928 0,3.166918047544312 0),(4 2.5689979853990117,4 1.6774295809266007,3.4387207031249987 1.1315182387740492,3.4387207031249987 2.8333171968552904,4 2.5689979853990117),(1.7687988281249998 2.8991526985043095,2.8454589843750004 2.3613917533090927,1.8786621093749998 1.7355743631421205,1.2524414062499993 2.7345569512697807,1.7687988281249998 2.8991526985043095),(1.646417696259425 4,1.895129986512118 4,2.1313476562499996 3.4476246666468597,1.3732910156250002 3.4476246666468597,1.646417696259425 4))"
    );
}

#[test]
fn test_poly_neg() {
    let rect = ClipRect::new(-1., -1., 1., 1.);
    let g = wkt!(POLYGON((-0.0219726562499994 0.6262082358143743,-0.26916503906249944 -0.021972655711422817,1.7633056640625009 -0.4064907305738785,0.7470703125000004 0.560293804172062,-0.0219726562499994 0.6262082358143743),(0.17578125000000042 0.45592780548687983,0.422973632812501 0.40649073057389273,0.36254882812500056 0.19775351362549998,0.10437011718750029 0.23620538561262094,0.17578125000000042 0.45592780548687983)));

    let clip = rect.clip(&Geometry::Polygon(g)).unwrap();
    println!("{}", clip.to_wkt());

    assert_eq!(
        clip.to_wkt().to_string(),
        "POLYGON((1 0.31967187552418397,0.7470703125000004 0.560293804172062,-0.0219726562499994 0.6262082358143743,-0.26916503906249944 -0.021972655711422817,1 -0.2620828313477561,1 0.31967187552418397),(0.17578125000000042 0.45592780548687983,0.422973632812501 0.40649073057389273,0.36254882812500056 0.19775351362549998,0.10437011718750029 0.23620538561262094,0.17578125000000042 0.45592780548687983))"
    );
}

#[test]
fn test_poly_osm_1() {
    let rect = ClipRect::new(
        -40701.18882128954,
        4851268.621429991,
        1565.430339280367,
        4893535.240590561,
    );
    let g = wkt!(POLYGON((-23714.235791431638 4883754.923742886,-25588.34223474753 4885147.654317883,-26188.666685525593 4885365.0791584095,-26193.350654483478 4883753.278687337,-26438.726505290182 4883659.104415881,-27423.49684970543 4883754.703220243,-28424.207300468515 4883015.280940808,-29308.453234305103 4882731.532533518,-30176.134105180477 4882954.908911108,-31149.596739659326 4883752.21452551,-30854.327575771193 4874956.077899112,-31150.097866057884 4872432.053513398,-33611.95085836651 4870816.275565053,-34128.89200399272 4869838.7898921305,-34844.86415084541 4865963.578452767,-32847.16684993201 4864454.418419109,-31035.961471082283 4864674.437483483,-29271.680708651747 4865536.580944964,-27422.50942402108 4865961.933318165,-26473.01042334732 4865590.094673743,-24912.769013954527 4864390.978655975,-23714.617533918878 4864344.4836069895,-22544.04250143567 4864987.383681261,-20093.026264610413 4867094.427966255,-18773.863108929374 4867574.409545303,-18771.674764598472 4865963.236398067,-16299.786472972157 4865962.485427853,-16299.914305498625 4864347.459968935,-15453.378869551036 4864117.427463171,-12592.707254779683 4865962.250100052,-6408.544992098486 4866749.705079893,3910.7605042473956 4865086.241404312,4508.135140982094 4866360.085200486,7366.313717464343 4870583.025972685,13028.31578945334 4874133.106664421,16090.326587486996 4877406.224303334,19134.00372650727 4883481.4844809435,17525.192668790605 4884636.248937247,12413.46861575614 4885116.051539302,8423.347100398072 4883754.52896433,2252.593955326875 4878909.6915348815,2252.3418399531124 4880509.560058044,1738.4759383239204 4880716.472172194,1289.1187557081 4880098.138426283,1011.2516821912805 4878904.673193749,-3930.6571800881015 4878904.594347052,-3935.008426915177 4877279.778806011,-6403.976136442385 4877281.232887783,-9235.215379771613 4876098.869209311,-10162.65454498546 4876354.014939786,-12244.519074389009 4877867.024280159,-15058.761527072367 4878903.797094984,-16294.095618028978 4882137.566443686,-17105.58776983645 4882333.358751661,-20002.064829662817 4882137.962502141,-20635.61553978507 4882403.477049628,-21240.50647146651 4883754.617321803,-23714.235791431638 4883754.923742886),(-31138.51571132672 4869204.093103909,-30279.976606608427 4872412.335600809,-28456.73438831681 4873539.419514657,-26118.561711801234 4873305.271239855,-23724.075352855645 4872424.2048876155,-24859.767133120058 4870690.063240724,-26521.452164625618 4869636.926949294,-28645.593475825088 4869168.70893825,-31138.51571132672 4869204.093103909))).orient(Direction::Default);

    let clip = rect.clip(&Geometry::Polygon(g)).unwrap();
    println!("{}", clip.to_wkt());

    assert_eq!(
        clip.to_wkt().to_string(),
        "POLYGON((1565.430339280367 4880478.354395046,1289.1187557081 4880098.138426283,1011.2516821912805 4878904.673193749,-3930.6571800881015 4878904.594347052,-3935.008426915177 4877279.778806011,-6403.976136442385 4877281.232887783,-9235.215379771613 4876098.869209311,-10162.65454498546 4876354.014939786,-12244.519074389009 4877867.024280159,-15058.761527072367 4878903.797094984,-16294.095618028978 4882137.566443686,-17105.58776983645 4882333.358751661,-20002.064829662817 4882137.962502141,-20635.61553978507 4882403.477049628,-21240.50647146651 4883754.617321803,-23714.235791431638 4883754.923742886,-25588.34223474753 4885147.654317883,-26188.666685525593 4885365.0791584095,-26193.350654483478 4883753.278687337,-26438.726505290182 4883659.104415881,-27423.49684970543 4883754.703220243,-28424.207300468515 4883015.280940808,-29308.453234305103 4882731.532533518,-30176.134105180477 4882954.908911108,-31149.596739659326 4883752.21452551,-30854.327575771193 4874956.077899112,-31150.097866057884 4872432.053513398,-33611.95085836651 4870816.275565053,-34128.89200399272 4869838.7898921305,-34844.86415084541 4865963.578452767,-32847.16684993201 4864454.418419109,-31035.961471082283 4864674.437483483,-29271.680708651747 4865536.580944964,-27422.50942402108 4865961.933318165,-26473.01042334732 4865590.094673743,-24912.769013954527 4864390.978655975,-23714.617533918878 4864344.4836069895,-22544.04250143567 4864987.383681261,-20093.026264610413 4867094.427966255,-18773.863108929374 4867574.409545303,-18771.674764598472 4865963.236398067,-16299.786472972157 4865962.485427853,-16299.914305498625 4864347.459968935,-15453.378869551036 4864117.427463171,-12592.707254779683 4865962.250100052,-6408.544992098486 4866749.705079893,1565.4303392803668 4865464.306724506,1565.430339280367 4880478.354395046),(-31138.51571132672 4869204.093103909,-30279.976606608427 4872412.335600809,-28456.73438831681 4873539.419514657,-26118.561711801234 4873305.271239855,-23724.075352855645 4872424.2048876155,-24859.767133120058 4870690.063240724,-26521.452164625618 4869636.926949294,-28645.593475825088 4869168.70893825,-31138.51571132672 4869204.093103909))"
    );
}

#[test]
fn test_poly_osm_2() {
    let rect = ClipRect::new(
        2191602.4749925733,
        4945781.478164047,
        2194048.4598977007,
        4948227.463069171,
    );
    let g = wkt!(POLYGON((2190755.7566817016 4946580.49077044,2190795.163781442 4946581.677500468,2190860.8534129597 4946591.229949868,2190938.4876258387 4946635.41747487,2190986.2659512875 4946682.007985357,2191042.3932385454 4946782.383450222,2191048.3710952005 4946848.080048405,2191051.9444508553 4946885.104172578,2191037.6176323905 4946934.069414085,2190999.401651201 4947032.000630332,2190993.4237945457 4947089.332749089,2191024.4819324766 4947144.262302655,2191061.44000342 4947232.5839261785,2190955.207813356 4947268.481296405,2190973.119119425 4947297.140678939,2191069.8000971787 4947337.683005727,2191123.5451473338 4947430.841614478,2191077.0247321306 4947494.139569703,2191065.091282718 4947567.0059854835,2191074.5868352824 4947627.916453197,2191122.409688527 4947662.599104055,2191153.467826459 4947710.381360023,2191145.0520729544 4947773.622508105,2191097.329407252 4947823.83767676,2191130.7697822857 4947919.389339428,2191209.5951137166 4948045.991963985,2191319.478583079 4948019.704201263,2191369.583485885 4948035.177925974,2191376.8081208374 4948127.200202197,2191423.3841957855 4948191.689576228,2191362.4145106776 4948199.998054024,2191343.3009541086 4948251.343723735,2191383.977096044 4948269.2649497045,2191422.1930772336 4948219.164728058,2191524.907571389 4948271.653472074,2191524.8407796943 4948349.2880925415,2191366.054658027 4948367.194843822,2191370.830264182 4948394.6704873,2191505.7940148194 4948400.634543812,2191487.8159170565 4948438.866137169,2191530.874296095 4948463.938757846,2191625.228696492 4948506.933102868,2191602.4749925733 4948573.8135697525,2191529.683177544 4948576.260782165,2191450.7910544183 4948561.870595789,2191342.1766272513 4948523.653176833,2191305.084972919 4948522.466211834,2191290.8138141995 4948490.213057407,2191343.367745803 4948473.493040452,2191331.3675046954 4948443.6432650965,2191330.1652541948 4948379.13758073,2191240.653251648 4948344.511010572,2191237.0687640444 4948283.596092647,2191253.788951562 4948238.214211838,2191287.1736668507 4948171.336033381,2191251.406714459 4948096.149914075,2191191.6838076483 4948088.98447693,2191149.8833388546 4948084.207521741,2191108.0828700624 4948078.229004414,2191123.6119390284 4948131.977178323,2191137.9387574927 4948237.012627921,2191109.2183288685 4948318.23710133,2191080.553559989 4948311.071501933,2191049.495422058 4948254.933827706,2191028.06642008 4948121.221658665,2191017.257297524 4948065.041111432,2191016.121838718 4947968.359744159,2190982.6146719893 4947869.159028682,2190927.6785032824 4947793.916614469,2190930.1275320803 4947706.7914553685,2190902.6538817524 4947656.635496296,2190833.324102886 4947682.849022814,2190780.836962977 4947664.987478696,2190845.3354759426 4947575.357891564,2190911.013975511 4947529.979287501,2190894.293787994 4947460.702960054,2190836.90859049 4947325.741536807,2190785.556909387 4947250.503290896,2190744.9475591457 4947168.100857593,2190692.393627542 4947023.57592862,2190613.568296111 4947021.187710146,2190483.391283578 4947054.637473377,2190446.4220806854 4946997.364163833,2190605.2749940474 4946919.740242711,2190642.2330649905 4946868.313634368,2190611.1860590084 4946813.370974609,2190635.130881478 4946685.582863856,2190716.338450012 4946594.819446295,2190755.7566817016 4946580.49077044)));

    assert_eq!(rect.clip(&Geometry::Polygon(g)), None);
}

#[test]
fn test_poly_osm_3() {
    env_logger::init();

    let rect = ClipRect::new(
        -881043.7628262577,
        5136079.1037828205,
        -870281.4292437012,
        5146841.437365373,
    );
    let g = wkt!(POLYGON((-873529.3653264776 5143032.034578431,-873481.7539802652 5143001.548783821,-873438.7623929209 5142772.84114544,-873378.43836086 5142950.789179773,-873339.6323863695 5142938.843144269,-873351.5658357826 5142664.148253141,-873306.1808793863 5142542.9279824775,-873183.7628353608 5142514.2677165335,-873347.3913548777 5143216.536264596,-873228.5577984559 5143098.299279671,-873168.2448983443 5143163.383265974,-873093.5940478182 5143048.137217395,-873082.2505917065 5143151.436964648,-872928.1844164486 5143173.535391106,-872882.799460052 5143292.3713782085,-872817.109828535 5143309.685552039,-872716.7887034321 5143123.970994347,-872409.2463462175 5143008.127367855,-872521.5120526826 5142800.306106354,-872608.6974778719 5142759.699256847,-872548.3845777601 5142702.3775104685,-872609.8885964233 5142667.138412454,-872572.8637337856 5142616.978613775,-872638.5533653026 5142530.982456907,-872477.3182148377 5142531.58048036,-872525.6976655364 5142396.024471451,-872690.5061716558 5142378.113939353,-872598.5451403115 5142305.859187093,-872611.3802776001 5142206.425700675,-872489.5633588248 5142399.313554449,-872404.1701774374 5142357.811390146,-872411.6285833204 5142281.968743639,-872365.0525083726 5142324.367594236,-872424.7754151832 5142450.668247206,-872362.9597019457 5142638.47777393,-872437.0094272213 5142556.66759794,-872447.1617647817 5142659.07993524,-872267.4141829979 5142809.85980479,-872281.752133412 5142982.740039,-872093.6444578696 5142805.090429884,-872197.2495079509 5142672.520701577,-872233.3838146625 5142533.673562741,-872192.774464421 5142434.252656016,-872166.2025019686 5142603.238911588,-872112.1568891885 5142533.972574548,-872056.9201578569 5142570.990308432,-872041.6916515164 5142501.724205174,-871989.438282538 5142616.081570593,-871978.0948264262 5142502.621237621,-871857.1684635773 5142424.385374335,-871868.8124823143 5142531.58048036,-871753.262850871 5142549.2072384525,-871908.8207073055 5142576.970569688,-871906.7279008785 5142633.992548764,-871753.5634134961 5142609.219193027,-871638.9043379789 5142701.779476325,-871733.2587383755 5142722.082756427,-871645.7727505609 5142782.693836001,-871745.2033197376 5142895.858471739,-871710.8612568278 5142979.4507551575,-871832.6781756029 5143000.950730951,-871762.2129379308 5143149.34374693,-871847.016126017 5143258.924310883,-871798.3472446422 5143395.374727451,-871700.7089192674 5143430.018431828,-871732.6576131252 5143510.340874507,-871673.5358315649 5143590.948085151,-871794.7627570387 5143577.8200234,-871722.5052755647 5143637.823487007,-871826.110325646 5143711.58355633,-871751.170044444 5143762.930350686,-871554.702275143 5143666.20302868,-871451.6872183628 5144026.292606173,-871291.3537557734 5143909.540873358,-871149.8221551788 5144058.8302285755,-871208.643374114 5144059.727407233,-871201.1849682307 5144119.15072798,-871139.6698176184 5144081.528874532,-871089.23095634 5144156.084885626,-871314.6417932472 5144279.777970918,-871357.3439499155 5144413.551333263,-871527.2286248152 5144263.957368508,-871452.5889062383 5144216.779829737,-871466.3257314021 5144163.636218841,-871616.8074190565 5144237.086329752,-871529.6219938672 5144383.3901064405,-871325.985249359 5144464.0046841325,-871160.5756179894 5144249.632119742,-871065.0300990415 5144293.819151338,-871150.423280429 5144388.16026934,-871139.6698176184 5144493.268946031,-871213.1295495928 5144540.447850334,-871225.0741309552 5144668.243288978,-871403.018336988 5144627.030344313,-871449.6055438849 5144704.072974625,-871309.265061842 5144705.852499242,-871219.6973995498 5144917.259392216,-871232.8330994634 5145074.310959862,-871072.1990742486 5145120.296362957,-871183.8636554634 5145263.009545575,-871109.2239368865 5145364.538643825,-871156.3900051357 5145642.212555811,-871045.3265491711 5145977.220641725,-871221.4896433514 5146294.905905603,-871226.2652495065 5146466.293724099,-871159.3844994379 5146568.418934215,-871222.0796366527 5146558.263200242,-871259.7056245407 5146387.4719961295,-871423.0335814328 5146560.058027255,-871345.6999311786 5146397.029282945,-871407.8050750921 5146263.258050737,-871376.1458119106 5146432.267186776,-871509.0167561214 5146480.338119247,-871454.9822752903 5146534.676213226,-871470.1996496819 5146623.355809051,-871416.1651688508 5146640.676021882,-871460.6484373717 5146679.190424668,-871503.0500314148 5146681.882699408,-871527.5291874403 5146519.151011969,-871582.1759254708 5146549.004889579,-871546.0416187592 5146597.375548701,-871630.2436815953 5146560.058027255,-871723.1064008151 5146414.349085303,-871702.8017256943 5146538.550039056,-871655.6245254962 5146573.788465083,-871738.6243378316 5146685.1583013665,-871733.2587383755 5146594.982436737,-871761.9235072546 5146663.964129583,-871794.1616317884 5146586.322367831,-871791.4788320604 5146664.562411838,-871752.0606003704 5146685.756584951,-871805.8056505253 5146741.591565413,-871815.6685574097 5147025.542845068,-871776.2503257198 5147015.087472817,-871719.5219132114 5146857.13646079,-871699.517800716 5146819.817924255,-871672.0441503881 5146819.518778258,-871599.196675613 5146913.869890102,-871658.9084504746 5147101.976600809,-871582.1759254708 5147119.596837147,-871624.2769568888 5147155.420762547,-871825.2197697196 5147090.638639102,-871949.4300575469 5147152.743312119,-872010.9340762101 5147069.4286096785,-871968.8330447921 5147168.269543484,-872059.6029575849 5147173.0410975,-872072.1486641973 5146977.768319013,-872163.8091329165 5146952.38539473,-872007.3495886066 5146943.425851826,-872061.6957640118 5146732.033933759,-872142.6139018694 5146763.384197929,-872109.4740894603 5146815.644838453,-872191.5833458694 5146779.508085706,-872355.5012960626 5146887.305500538,-872559.1380405707 5146838.933372847,-872469.5592463294 5146753.542357732,-872356.1024213128 5146824.604261469,-872182.3215642355 5146705.769192435,-872107.0807204084 5146377.9147188775,-872184.7149332875 5146322.979255944,-872211.5874583649 5146172.48791833,-872129.1776393307 5146296.102423913,-872088.5682890892 5146118.151885079,-872227.1053953816 5146064.414405625,-872403.8696148122 5145843.4552895725,-872903.1041351728 5145818.9727239,-873022.5388168449 5145675.054793275,-873135.3945166111 5145692.971507771,-873048.2090914218 5145310.790449422,-872929.375535 5145218.818030369,-872887.5750662072 5145365.720090562,-872811.1319718794 5145384.234426849,-872955.6469348273 5145458.292130885,-872829.6444031984 5145583.692036437,-872797.4062786646 5145513.222620322,-872714.9964596304 5145574.733777485,-872556.7446715187 5145466.053866147,-872447.462327407 5145528.746186436,-872452.8390588121 5145387.225437692,-872523.3042964843 5145329.304679233,-872561.5202776737 5145431.417732082,-872545.4012154068 5145308.995857163,-872657.6669218718 5145268.991492279,-872777.101603544 5145437.983034548,-872747.8357094143 5145347.8039899375,-872889.367310009 5145278.532705026,-872892.3506723623 5145175.224908589,-873076.8738603011 5145101.184353906,-873281.7017233608 5144879.036224854,-873556.3936988421 5144821.1185479425,-873536.6901489717 5144708.843297666,-873613.7232366008 5144599.560131261,-873531.3134175664 5144502.226190767,-873529.3653264776 5143032.034578431),(-872955.6469348273 5144673.013594129,-872943.1123601639 5144797.819979132,-872874.4393662935 5144855.154300038,-872824.8687970433 5144417.424298886,-873005.8074973788 5144323.681027516,-873067.9126412922 5144212.009752417,-873066.7215227409 5144048.976221857,-873134.80452331 5143973.13510212,-873329.4800488092 5144087.79418881,-873309.7653669898 5144194.678989971,-873379.6406113607 5144269.325604007,-873332.4634111625 5144414.448545236,-873493.6985616274 5144429.970325723,-873541.4657551268 5144577.47335966,-873451.8980928346 5144627.628498986,-873394.5685550761 5144515.370476628,-873115.6909667407 5144524.327742087,-873103.1452601283 5144650.328496556,-873204.6686357319 5144659.285888567,-873057.771435681 5144986.528057096,-872990.8795536634 5144971.005372201,-873058.9625542326 5144843.205882917,-872956.8491853279 5144870.0786267705,-873056.5691851805 5144721.987867845,-872955.6469348273 5144673.013594129),(-872808.1486095262 5145205.986826693,-872736.1916906774 5145238.229371259,-872732.907765699 5145171.65073007,-872752.0213222683 5145162.393763473,-872808.1486095262 5145205.986826693),(-872827.8632913457 5143401.056465781,-872803.3730033711 5143718.745774624,-872971.7771290432 5143790.996260292,-872973.5693728449 5143688.287693462,-873059.5525475336 5143710.985459012,-872995.6662917675 5143882.371777486,-872919.2231974397 5143826.239503836,-872875.630484845 5143960.00651516,-872830.8466536991 5143953.427275635,-872873.2371157929 5144068.684245459,-872788.4450596557 5144006.584670027,-872703.6530035186 5144045.402464723,-872747.2457161132 5144214.387314169,-872588.3928027512 5144300.981806168,-872467.1658772773 5144204.832211092,-872500.6062523116 5144060.9236455755,-872417.0053147258 5143960.604628071,-872572.2737404843 5143810.105648165,-872588.3928027512 5143522.272672485,-872702.450753018 5143352.687038328,-872827.8632913457 5143401.056465781),(-872726.9410409925 5143242.208296979,-872714.3953343801 5143312.675913392,-872572.2737404843 5143348.500515163,-872485.6783085963 5143214.143999511,-872566.2958838287 5143201.001503894,-872726.9410409925 5143242.208296979),(-872589.2944906265 5145628.483457226,-872564.8042026521 5145704.621876884,-872458.8057835186 5145674.157462882,-872522.1131779327 5145595.043164604,-872589.2944906265 5145628.483457226),(-872196.6595146495 5145542.490096952,-872311.908583468 5145326.911884991,-872436.7199965455 5145337.0663096765,-872441.4956027004 5145565.775526936,-872348.9334461057 5145491.731944716,-872196.6595146495 5145542.490096952),(-872233.0832520372 5143587.374499355,-872228.3076458821 5143548.259522157,-872274.88372083 5143544.67100016,-872233.0832520372 5143587.374499355),(-872318.7769960499 5145687.004251047,-872261.7480209164 5145727.907702153,-872308.9252211147 5145759.553783054,-872146.487820149 5145814.800075413,-872236.0666143905 5145771.503346547,-872172.4697893001 5145603.702334689,-872318.7769960499 5145687.004251047),(-872262.9391394679 5143116.211161846,-872240.2522272442 5143230.859964313,-872163.8091329165 5143232.6541662095,-872194.2661455977 5143118.603402407,-872262.9391394679 5143116.211161846),(-872039.0088517881 5147031.510938221,-871996.0061324948 5147038.675646458,-871997.7983762966 5146967.612149698,-872039.0088517881 5147031.510938221),(-871898.0672444947 5147054.799999065,-871959.5823951071 5147013.905822023,-871960.4729510335 5147111.235447599,-871898.0672444947 5147054.799999065),(-872007.3495886066 5146640.077741122,-871936.8843509345 5146628.4262307985,-871934.2015512063 5146546.013514868,-872007.3495886066 5146640.077741122),(-871953.0145451505 5145239.126660698,-871964.3580012622 5145466.053866147,-871927.9342638747 5145507.255475899,-871890.3082759865 5145334.0753145395,-871953.0145451505 5145239.126660698),(-871872.0964072928 5147014.489168599,-871860.7529511809 5146984.334684599,-871913.5963134605 5146979.563224874,-871872.0964072928 5147014.489168599),(-871910.9135137324 5146738.600130376,-871867.910794439 5146740.095847778,-871888.5160321847 5146714.414412527,-871910.9135137324 5146738.600130376),(-871904.3456637756 5146766.9739294015,-871884.6309819561 5146815.943984328,-871865.8291199611 5146767.572218112,-871904.3456637756 5146766.9739294015),(-871907.0284635036 5146393.140557891,-871884.9315445812 5146435.243569158,-871808.1990195775 5146245.938522391,-871907.0284635036 5146393.140557891),(-871724.2975193666 5146947.314800969,-871708.7684504009 5146982.8389289435,-871675.0275127415 5146824.604261469,-871724.2975193666 5146947.314800969),(-871607.8462000476 5146312.52465286,-871644.5816320095 5146369.25484681,-871643.9805067593 5146381.20517319,-871603.6717191428 5146375.835750601,-871607.8462000476 5146312.52465286),(-872433.1355089417 5145647.581565961,-872477.3182148377 5145756.263542916,-872403.5690521871 5145795.985790534,-872454.6313026139 5145739.842270442,-872377.8987776102 5145715.659081782,-872433.1355089417 5145647.581565961),(-872345.3489585022 5143071.416567942,-872441.4956027004 5143080.970537473,-872453.4401840625 5143097.701220745,-872311.908583468 5143135.91726133,-872345.3489585022 5143071.416567942)));

    let clip = rect.clip(&Geometry::Polygon(g.clone())).unwrap();
    println!("{}", clip.to_wkt());

    assert!(clip.unsigned_area() <= g.unsigned_area());
}

#[test]
fn test_poly_of_1() {
    let rect = ClipRect::new(626976.0, 6922240.0, 628000.0, 6923264.0);
    let g = wkt!(POLYGON((626881.256 6923160.988,626844.994 6923172.066,626819.12 6923180.445,626812.161 6923183.194,626802.0685 6923187.1805,626792.657 6923190.898,626794.281 6923196.533,626785.767 6923204.541,626779.438 6923208.165,626776.729 6923216.08,626781.749 6923221.224,626783.271 6923226.861,626782.45 6923236.666,626787.078 6923244.558,626787.866 6923259.703,626791.759 6923267.353,626792.575 6923273.634,626787.581 6923278.758,626780.096 6923279.368,626764.1138 6923280.312,626765.288 6923288.751,626765.334 6923289.218,626766.066 6923301.417,626767.032 6923323.318,626767.361 6923336.301,626767.363 6923336.453,626767.329 6923337.089,626766.197 6923347.7133,626909.421 6923390.3874,626919.02 6923393.247,626919.598 6923393.4197,626924.353 6923394.837,626929.996 6923396.519,626931.261 6923395.223,626934.101 6923392.409,626934.598 6923391.943,626936.099 6923390.621,626937.681 6923389.401,626939.389 6923388.364,626940.6542 6923387.7758,626942.552 6923387.145,626944.516 6923386.78,626945.778 6923386.685,626947.777 6923386.692,626949.774 6923386.765,626950.805 6923386.795,626961.454 6923373.651,626972.791 6923365.298,626985.917 6923364.104,626997.483 6923361.876,626997.275 6923341.56,626997.33 6923340.722,626999.849 6923322.171,626999.885 6923321.936,626999.947 6923321.633,627001.119 6923316.536,627002.293 6923311.437,627002.516 6923310.693,627004.466 6923305.548,627006.401 6923300.621,627007.85 6923296.09,627008.773 6923291.363,627010.1566 6923283.358,627010.485 6923281.454,627011.289 6923276.806,627011.586 6923272.074,627011.974 6923266.949,627011.991 6923266.766,627012.535 6923261.667,627010.096 6923255.089,627009.831 6923254.411,626997.862 6923251.142,626985.274 6923249.965,626981.722 6923245.226,626975.928 6923239.278,626974.776 6923227.501,626977.453 6923218.388,626974.05 6923210.584,626968.746 6923206.076,626967.8333 6923206.1165,626967.8228035349 6923205.879783463,626965.260539244 6923206.903240792,626959.8184716016 6923207.050024747,626958.2199135446 6923208.0815442875,626956.3538646413 6923211.328264233,626956.43375961 6923215.074023962,626955.325400408 6923217.305690119,626950.9018326355 6923219.514946477,626948.7252463177 6923222.860399559,626945.3817533738 6923225.061162045,626942.9844945687 6923229.647381187,626939.0510800557 6923231.795697429,626934.8307369051 6923231.619395626,626928.7617737992 6923226.271804868,626924.9382896011 6923225.788506793,626917.8950567379 6923222.477420627,626916.1933357272 6923220.694900561,626915.5670045926 6923217.818514922,626916.3919767927 6923215.449058311,626920.3277004068 6923210.937806619,626920.0228391747 6923206.886230729,626920.9823583545 6923203.976252207,626921.211174371 6923197.568651757,626922.9823583545 6923193.976252207,626921.8221991366 6923189.423564352,626918.3239462054 6923186.676053793,626915.9184557121 6923183.219913545,626912.3170555293 6923180.338670614,626911.3340997987 6923177.2521364065,626912.6295914794 6923172.284446964,626908.9265658171 6923169.334084822,626906.9184557121 6923165.219913545,626905.3823171265 6923164.103605309,626901.2368368213 6923163.784703168,626898.3823171265 6923162.103605309,626895.0631868565 6923161.43938665,626893.1004076801 6923159.785021479,626891.9522367463 6923158.235290782,626881.256 6923160.988))).orient(Direction::Default);

    let clip = rect.clip(&Geometry::Polygon(g)).unwrap();
    println!("{}", clip.to_wkt());

    assert_eq!(clip.to_wkt().to_string(), "MULTIPOLYGON(((626976 6923239.351913704,626981.722 6923245.226,626985.274 6923249.965,626997.862 6923251.142,627009.831 6923254.411,627010.096 6923255.089,627012.535 6923261.667,627012.2860978624 6923264,626976 6923264,626976 6923239.351913704)),((626976 6923215.055877755,626977.453 6923218.388,626976 6923223.334279044,626976 6923215.055877755)))");
}

#[test]
fn test_poly_of_2() {
    let rect = ClipRect::new(626976.0, 6922240.0, 628000.0, 6923264.0);
    let g = wkt!(POLYGON((627914.683 6923290.46,627910.287 6923279.515,627913.611 6923274.24,627917.259 6923275.878,627918.514 6923276.471,627921.979 6923278.466,627923.579 6923279.31,627925.439 6923280.039,627927.377 6923280.524,627928.584 6923280.695,627930.58 6923280.773,627932.573 6923280.631,627933.758 6923280.466,627935.715 6923280.06,627937.62 6923279.461,627938.911 6923278.896,627940.64 6923277.896,627942.197 6923276.646,627943.422 6923275.076,627943.863 6923273.954,627943.9819999814 6923271.969999125,627943.6219999815 6923270.002999126,627943.3669999815 6923268.860999125,627942.8919999815 6923266.919999125,627942.2779999814 6923265.017999127,627941.6439999813 6923263.747999127,627940.3139999816 6923262.257999128,627938.8550004252 6923260.892999542,627937.5050004245 6923259.420999611,627936.9270003769 6923258.485999767,627936.4280001944 6923256.55899995,627936.3450000176 6923254.562999996,627936.3169999816 6923253.433999128,627936.1880000376 6923251.438999997,627936.242 6923249.445,627936.51 6923248.292,627937.383 6923246.501,627938.692 6923244.996,627940.375 6923243.943,627941.736 6923243.768,627943.565 6923244.507,627944.93 6923245.957,627945.843 6923247.727,627946.1079998445 6923249.071999975,627945.7899997382 6923251.03899992,627945.2049997135 6923252.949999901,627944.8009999815 6923254.114999127,627944.514 6923256.089,627944.716 6923258.071,627945.182 6923259.248,627946.442 6923260.788,627948.071 6923261.942,627950.032 6923263.126,627951.682 6923264.256,627953.23 6923265.519,627954.651 6923266.925,627954.962 6923267.273,627956.212 6923268.833,627957.34 6923270.483,627958.403 6923272.177,627960.668 6923275.937,627961.904 6923277.832,627964.161 6923281.131,627965.125 6923283.115,627965.642 6923285.042,627965.7219998216 6923287.034999966,627965.505999656 6923288.170999845,627964.682999595 6923289.987999749,627963.6309996115 6923291.68899978,627962.7799997175 6923293.195999905,627962.1399999816 6923295.085999126,627961.8129998798 6923297.057999986,627961.6649999814 6923298.3129991265,627961.514 6923300.306,627961.606 6923302.298,627961.971 6923303.486,627963.079 6923305.137,627964.637 6923306.381,627966.448 6923307.216,627966.82 6923307.326,627968.8 6923307.575,627970.799 6923307.574,627971.999 6923307.518,627975.996 6923307.425,627977.175 6923307.443,627979.173 6923307.523,627981.167 6923307.67,627982.358 6923307.789,627984.349 6923307.968,627986.34 6923307.912,627987.414 6923307.448,627988.554 6923305.845,627989.007 6923303.901,627989.182 6923302.476,627989.408 6923300.489,627989.837 6923298.539,627990.337 6923297.512,627991.906 6923296.299,627993.778 6923295.602,627995.631 6923295.019,627999.371 6923293.605,628000.781 6923293.142,628002.736 6923292.732,628004.729 6923292.657,628005.837 6923292.838,628007.66 6923293.644,628009.339 6923294.727,628010.789 6923295.794,628012.372 6923297.016,628013.904 6923298.299,628015.176 6923299.833,628015.576 6923300.595,628016.164 6923302.504,628016.661 6923304.439,628017.183 6923305.71,628018.469 6923307.226,628020.166 6923308.273,628022.178 6923308.936,628026.134 6923309.501,628027.215 6923309.86,628028.811 6923311.042,628029.949 6923312.679,628030.676 6923314.536,628030.818 6923315.136,628031.395 6923319.089,628031.929 6923320.297,628033.455 6923321.556,628035.344 6923322.196,628036.984 6923322.408,628038.978 6923322.316,628040.929 6923321.889,628042.109 6923321.528,628043.991 6923320.853,628045.5440022775 6923320.256005407,628055.9789076566 6923348.828033721,628054.039 6923348.5,628052.951 6923347.035,628044.696 6923344.936,628039.194 6923339.688,628033.605 6923334.638,628023.855 6923332.828,628018.476 6923338.078,628012.433 6923333.721,628004.757 6923331.056,628000.138 6923325.066,627991.066 6923330.412,627985.581 6923335.312,627979.543 6923334.06,627970.621 6923329.294,627965.971 6923324.022,627944.687 6923320.002,627932.224 6923313.54,627918.838 6923300.153,627914.683 6923290.46))).orient(Direction::Default);

    let clip = rect.clip(&Geometry::Polygon(g)).unwrap();
    println!("{}", clip.to_wkt());

    assert!(clip.to_wkt().to_string().starts_with("POLYGON"));
}
